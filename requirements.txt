Answer:
import matplotlib.pyplot as plt
import numpy as np
ab=[1,7,21,35,35,21,7,1]
s=np.sin(ab)
c=np.cos(ab)
t=np.tan(ab)
plt.plot(ab,s,'c',label='sine')
plt.plot(ab,c,'r',label='cosine')
plt.plot(ab,t,'k',linestyle='dashed',label='tan')
plt.legend(loc=1)
plt.title('sine,cos and tan chart')
plt.xlabel('Values')
plt.ylabel('sin,cos,tan')


Q1.
import matplotlib.pyplot as plt
import numpy as np
A=np.arange(1,20,1.25)
B=np.log(A)
C=np.log10(A)
plt.plot(A,B,'ro',label='log')
plt.plot(A,C,'b^',label='log10')

plt.legend(loc=2)
plt.title('log and log10')
plt.xlabel('random values')
plt.ylabel('log and log10 values')

Q3.
import matplotlib.pyplot as plt
import numpy as np
subject=['English','Acct','Bst','Ip','Math']
mark=[[67,87,99,56,70],[90,87,54,39,80],[56,67,78,89,90]]
x=np.arange(len(subject))
plt.bar(x,mark[0],color='r',width=0.25,label='student1')
plt.bar(x+0.25,mark[1],color='b',width=0.25,label='student2')
plt.bar(x+0.5,mark[2],color='g',width=0.25,label='student3')
plt.legend(loc=2)
plt.title('Result analysis')
plt.xlabel('subject')
plt.ylabel('marks')
plt.xticks(x,subject)


Q5. 
import matplotlib.pyplot as plt
import numpy as np
country=['Australi','Canada','India','England','SouthAfrica']

gold=[42,12,65,40,40]
Silver=[36,24,46,36,50]
Bronze=[50,60,50,58,46]
Total=[128,96,161,134,136]

x=np.arange(len(country))
plt.bar(x,gold,color='r',width=0.25,label='Gold')
plt.bar(x+0.25,Silver,color='b',width=0.25,label='Silver')
plt.bar(x+0.50,Bronze,color='g',width=0.25,label='Bronze')
plt.bar(x+0.75,Total,color='y',width=0.25,label='Total')

plt.legend(loc=2)
plt.title('Medal tally')
plt.xlabel('Country')
plt.ylabel('Medal')
plt.xticks(x,country)

Q5. 
import matplotlib.pyplot as plt
import numpy as np
medal=['Gold','Silver','Bronze','Total']
australia=[42,36,50,128]
Canada=[12,24,60,96]
India=[65,46,50,161]
England=[40,36,58,134]
SouthAfrica=[40,50,46,136]
x=np.arange(len(medal))
plt.bar(x,australia,color='r',width=0.25,label='Australia')
plt.bar(x+0.25,Canada,color='b',width=0.25,label='Canada')
plt.bar(x+0.50,India,color='g',width=0.25,label='India')
plt.bar(x+0.75,England,color='y',width=0.25,label='England')
plt.bar(x+1.0,SouthAfrica,color='m',width=0.25,label='SouthAfrica')
plt.legend(loc=2)
plt.title('Medal tally')
plt.xlabel('Madal')
plt.ylabel('Counytry')
plt.xticks(x,medal)
CSV

import pandas as pd
df=pd.read_csv("D:\\marks.csv",names=['Name','Mark1','Mark2','Mark3'])
print('Data frame taking data from the csv file')
print(df)
df['Total']=df['Mark1']+df['Mark2']+df['Mark3']
df['Average']=df['Total']/3 
print(df)
Q2.
import pandas as pd

df=pd.read_csv("D:\\sports.csv",skiprows=1,sep='\t',names=['sport','Competition','Prizeon'])
print('Data frame taking data from the csv file')
print(df)
df.plot(x='sport',y='Competition',kind='line')

HISTOGRAM
import matplotlib.pyplot as plt
import numpy as np

# Given marks data
marks = [56,78,92,67,56,78,90,45,34,56,27,58,30,40,50,60,70,80,30,40,50,60,70,70,80,45,55,65,45,65]

# Set the number of bins
num_bins = 20

# Create the histogram
plt.hist(marks, bins=num_bins, edgecolor='black')

# Set the title and labels
plt.title('Distribution of Marks in Mathematics Test')
plt.xlabel('Marks')
plt.ylabel('Frequency')

# Show the plot
plt.show()


Q5
import numpy as np
import matplotlib.pyplot as plt

ab = [1, 7, 21, 35, 35, 21, 7, 1]

sin_ab = np.sin(ab)
cos_ab = np.cos(ab)
tan_ab = np.tan(ab)

plt.plot(ab, sin_ab, label='sin(ab)', color='cyan')
plt.plot(ab, cos_ab, label='cos(ab)', color='red')
plt.plot(ab, tan_ab, label='tan(ab)', color='black', linestyle="dashed")

plt.title('Trigonometric Functions of ab')
plt.xlabel('ab')
plt.ylabel('Function Values')

plt.legend()

plt.show()


DATAFRAME 

import pandas as pd

# Given data
data = {
    'City': ['Delhi', 'Mumbai', 'Kolkata', 'Chennai'],
    'Population': [10256389, 25362984, 13568479, 18562495],
    'Hospitals': [145, 208, 145, 200],
    'Schools': [870, 1563, 650, 748]
}

# (a) Display no of schools and hospitals city wise
df = pd.DataFrame(data)
citywise_stats = df[['City', 'Schools', 'Hospitals']]
print("(a) City-wise Schools and Hospitals:\n", citywise_stats, "\n")

# (b) Display the population and no of hospitals for Delhi and Kolkata
delhi_kolkata_stats = df.loc[df['City'].isin(['Delhi', 'Kolkata']), ['City', 'Population', 'Hospitals']]
print("(b) Population and Hospitals for Delhi and Kolkata:\n", delhi_kolkata_stats, "\n")

# (c) Add a column police station with the given data
police_station_data = [2500, 2145, 2396, 1875]
df['PoliceStation'] = police_station_data
print("(c) DataFrame with Police Station column:\n", df, "\n")

# (d) Rename the column Schools to GovtSchools
df.rename(columns={'Schools': 'GovtSchools'}, inplace=True)
print("(d) DataFrame with renamed column:\n", df)




DATAFRAME

import pandas as pd

# Given data
data = {
    'Year1': [35000, 22000, 23000, 31000],
    'Year2': [42000, 32000, 42000, 40000],
    'Year3': [36000, 15000, 65000, 50000]
}

# Create DataFrame
df = pd.DataFrame(data, index=['Qtr1', 'Qtr2', 'Qtr3', 'Qtr4'])

# (a) Display Quarter wise total sale after showing year wise sale
quarter_wise_total = df.copy()
quarter_wise_total['Total Sale'] = df.sum(axis=1)
print("(a) Quarter-wise total sale after showing year-wise sale:\n", quarter_wise_total, "\n")

# (b) Display year wise total sale after showing quarter wise sale
year_wise_total = df.copy()
year_wise_total.loc['Total Sale'] = df.sum()
print("(b) Year-wise total sale after showing quarter-wise sale:\n", year_wise_total, "\n")

# (c) Find maximum sale in Year2 and minimum sales in Year3
max_sale_year2 = df['Year2'].max()
min_sale_year3 = df['Year3'].min()
print(f"(c) Maximum sale in Year2: {max_sale_year2}, Minimum sale in Year3: {min_sale_year3}\n")

# (d) Find the year for maximum sale and minimum sale in Qtr3
max_sale_qtr3_year = df.loc['Qtr3'].idxmax()
min_sale_qtr3_year = df.loc['Qtr3'].idxmin()
print(f"(d) Year for maximum sale in Qtr3: {max_sale_qtr3_year}, Year for minimum sale in Qtr3: {min_sale_qtr3_year}")



import pandas as pd

# Given data
sales_data = [
    {'Zone name': 'ZoneA', 'Target': 750000, 'Sales': 800000, 'No of employees': 12},
    {'Zone name': 'ZoneB', 'Target': 600000, 'Sales': 700000, 'No of employees': 15},
    {'Zone name': 'ZoneC', 'Target': 850000, 'Sales': 800000, 'No of employees': 16},
    {'Zone name': 'ZoneD', 'Target': 900000, 'Sales': 840000, 'No of employees': 13}
]

# Create DataFrame
df = pd.DataFrame(sales_data)
df.set_index('Zone name', inplace=True)  # Set Zone name as row labels

# (a) Display Zone name and target
zone_target = df[['Target']]
print("(a) Zone name and Target:\n", zone_target, "\n")

# (b) Display the Target and No of Employees for ZoneB and ZoneD
zoneb_zoned_stats = df.loc[['ZoneB', 'ZoneD'], ['Target', 'No of employees']]
print("(b) Target and No of Employees for ZoneB and ZoneD:\n", zoneb_zoned_stats, "\n")

# (c) Delete the column No of employees from the dataframe
df.drop('No of employees', axis=1, inplace=True)
print("(c) DataFrame with No of employees column deleted:\n", df, "\n")

# (d) Rename the row ZoneC to SectorC and ZoneD to SectorD
df.rename(index={'ZoneC': 'SectorC', 'ZoneD': 'SectorD'}, inplace=True)
print("(d) DataFrame with renamed rows:\n", df)



SQL
CREATE TABLE Student (
    Roll INT PRIMARY KEY,
    Name VARCHAR(50),
    Class VARCHAR(10),
    Dofb DATE,
    Mark FLOAT
);

INSERT INTO Student VALUES
(10, 'Parveen', 'XII-A', '2002-10-12', 98.5),
(15, 'Nikita', 'XII-B', '2002-08-10', 95.5),
(20, 'Subhradeepta', 'XII-A', '2003-05-18', 90.5),
(25, 'Yogesh Kumar', 'XII-B', NULL, 73.25),
(30, 'Rahul Raj', 'XII-C', '2003-01-31', 70.25),
(32, 'Asutosh', 'XII_A', '2003-06-01', 78.25);

import mysql.connector
from mysql.connector import Error

# Function to create a connection to MySQL
def create_connection():
    connection = None
    try:
        connection = mysql.connector.connect(
            host='your_host',
            database='your_database',
            user='your_user',
            password='your_password'
        )
        if connection.is_connected():
            print("Connected to MySQL database")
        return connection
    except Error as e:
        print(f"Error: {e}")
        return None

# Function to execute a query
def execute_query(connection, query):
    cursor = connection.cursor(dictionary=True)
    cursor.execute(query)
    result = cursor.fetchall()
    return result

# Connect to MySQL
conn = create_connection()

# (i) Display details of the students of class XII-A
query_i = "SELECT * FROM Student WHERE Class = 'XII-A';"
result_i = execute_query(conn, query_i)
print("(i) Students of Class XII-A:\n", result_i)

# (ii) Display Details of the students whose mark is between 80 to 95 both the limits are included
query_ii = "SELECT * FROM Student WHERE Mark BETWEEN 80 AND 95;"
result_ii = execute_query(conn, query_ii)
print("\n(ii) Students with Marks between 80 and 95:\n", result_ii)

# (iii) Display Roll, Name, and mark where dofb is not given
query_iii = "SELECT Roll, Name, Mark FROM Student WHERE Dofb IS NULL;"
result_iii = execute_query(conn, query_iii)
print("\n(iii) Students with Dofb not given:\n", result_iii)

# (iv) Display details of the students whose name starts with ‘N’
query_iv = "SELECT * FROM Student WHERE Name LIKE 'N%';"
result_iv = execute_query(conn, query_iv)
print("\n(iv) Students whose name starts with 'N':\n", result_iv)

# (v) Change the column name dofb to Date_of_birth
query_v = "ALTER TABLE Student CHANGE COLUMN Dofb Date_of_birth DATE;"
execute_query(conn, query_v)
print("\n(v) Column name 'dofb' changed to 'Date_of_birth'.")

# (vi) Bring the column mark after Name
query_vi = "ALTER TABLE Student MODIFY COLUMN Mark FLOAT AFTER Name;"
execute_query(conn, query_vi)
print("\n(vi) Column order updated.")


MySQL 
SELECT * FROM Employee WHERE Salary BETWEEN 70000 AND 90000;
SELECT Eno, Name, Desi FROM Employee WHERE Dept = 'Civil';
UPDATE Employee SET Salary = Salary * 1.2 WHERE Salary < 80000;
DELETE FROM Employee WHERE Name = 'Om Pangi';
SELECT Name, IFNULL(Dept, 'new employee') AS Department FROM Employee;


MySQL
SELECT E.Ename, D.Job, D.Deptno, E.Gross
FROM EMPLOYEE E
JOIN DEPT D ON E.Ecode = D.Ecode
WHERE D.Commission IS NULL;

CREATE VIEW itax AS
SELECT Ecode, Ename, Job, Gross * 0.1 AS Tax
FROM EMPLOYEE
WHERE Gross >= 25000;

SELECT Ename, Gross
FROM EMPLOYEE
WHERE Gross > (SELECT Gross FROM EMPLOYEE WHERE Ename = 'Kartik')
ORDER BY Ename DESC;

SELECT CONCAT(Ename, ' works in the grade of ', Grade, ' and earns salary ', Gross) AS EmployeeDetails
FROM EMPLOYEE;

SELECT *
FROM EMPLOYEE
ORDER BY Grade DESC, Gross ASC;

SQL
CREATE TABLE FLIGHTS (
    FL_NO VARCHAR(10) PRIMARY KEY,
    STARTING_S VARCHAR(50),
    ENDING_S VARCHAR(50),
    NO_FLIGHTS INT,
    NO_STOPS INT
);

INSERT INTO FLIGHTS VALUES
('IC301', 'MUMBAI', 'DELHI', 8, 0),
('IC799', 'BANGALORE', 'DELHI', 2, 1),
('MC101', 'INDORE', 'MUMBAI', 8, 3),
('AM876', 'KANPUR', 'KOCHI', 6, 2),
('MU898', 'DELHI', 'TRIVANDRUM', 7, 0),
('IC701', 'KANPUR', 'BANGALORE', 4, 5),
('MC202', 'DELHI', 'AHMEDABAD', 4, 0);

CREATE TABLE FARES (
    FL_NO VARCHAR(10) PRIMARY KEY,
    AIRLINES VARCHAR(50),
    FARE INT,
    TAX INT
);

INSERT INTO FARES VALUES
('IC301', 'Indian Airlines', 9400, 10),
('IC799', 'Jet Airlines', 8600, 8),
('MC101', 'Deccan Airlines', 7540, 7),
('AM876', 'Indian Airlines', 5460, 3),
('MU898', 'Indian Airlines', 9000, 6),
('IC701', 'Sahara', 8500, 6),
('MC202', 'Jet Airlines', 6500, 5);

SELECT FL_NO, NO_FLIGHTS
FROM FLIGHTS
WHERE STARTING_S = 'KANPUR' AND ENDING_S = 'BANGALORE';

SELECT FL.FL_NO, F.AIRLINES, F.FARE + F.TAX * F.FARE / 100 AS TotalFare
FROM FARES F
JOIN FLIGHTS FL ON F.FL_NO = FL.FL_NO
WHERE F.FARE > 6000;

SELECT AIRLINES, MAX(FARE) AS MaxFare, MIN(FARE) AS MinFare
FROM FARES
GROUP BY AIRLINES
HAVING COUNT(FL_NO) >= 2;

UPDATE FARES
SET FARE = FARE + 500
WHERE AIRLINES = 'Indian Airlines' AND TAX < 5;

SELECT FL_NO, STARTING_S, ENDING_S, AIRLINES
FROM FARES F
JOIN FLIGHTS FL ON F.FL_NO = FL.FL_NO
WHERE F.FARE < (SELECT FARE FROM FARES WHERE FL_NO = 'IC701');

import pandas as pd

# Given CSV data
data = {
    'Roll': [10, 15, 20, 25, 30, 32],
    'Name': ['Parveen', 'Nikita', 'Subhradeepta', 'Yogesh Kumar', 'Rahul Raj', 'Asutosh'],
    'Class': ['XII-A', 'XII-B', 'XII-A', 'XII-B', 'XII-C', 'XII_A'],
    'Dofb': ['2002-10-12', '2002-08-10', '2003-05-18', None, '2003-01-31', '2003-06-01'],
    'Mark': [98.5, 95.5, 90.5, 73.25, 70.25, 78.25]
}

# Create a DataFrame
df = pd.DataFrame(data)

# (i) Display details of the students of class XII-A
class_xii_a = df[df['Class'] == 'XII-A']
print("(i) Details of students of class XII-A:\n", class_xii_a)

# (ii) Display details of students whose mark is between 80 to 95
mark_between_80_95 = df[(df['Mark'] >= 80) & (df['Mark'] <= 95)]
print("\n(ii) Details of students with mark between 80 to 95:\n", mark_between_80_95)

# (iii) Display Roll, Name, and Mark where Dofb is not given
missing_dofb = df[df['Dofb'].isnull()][['Roll', 'Name', 'Mark']]
print("\n(iii) Roll, Name, and Mark where Dofb is not given:\n", missing_dofb)

# (iv) Display details of students whose name starts with 'N'
name_starts_with_n = df[df['Name'].str.startswith('N')]
print("\n(iv) Details of students whose name starts with 'N':\n", name_starts_with_n)

# (v) Change the column name Dofb to Date_of_birth
df.rename(columns={'Dofb': 'Date_of_birth'}, inplace=True)
print("\n(v) DataFrame with column name changed to 'Date_of_birth':\n", df)

# (vi) Bring the column 'Mark' after 'Name'
df = df[['Roll', 'Name', 'Mark', 'Class', 'Date_of_birth']]
print("\n(vi) DataFrame with column 'Mark' moved after 'Name':\n", df)


